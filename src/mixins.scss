@use "constants.scss";

// Note to developers:
// If possible, define common CSS in mixins in this file.
// They are accessible from everywhere.
// It is very useful for example to define the same material text fields both in Moodle and the login page::after
// they are defined in completely independent sections (which means duplicated CSS), but with Mixins, this can be quick to implement.

// Common color combinations

@mixin primary() {
    background-color: var(--bg-primary);
    color: var(--fg-on-primary);
}

@mixin secondary() {
    background-color: var(--bg-secondary);
    color: var(--fg-on-secondary);
}

@mixin success() {
    background-color: $bg-success;
    color: $fg-on-success;
}

@mixin error() {
    background-color: $bg-error;
    color: $fg-on-error;
}

// Surface and elevation

@mixin surface($dp) {
    // Common
    color: $fg-on-surface;

    // Level specific
    @if $dp == 0 {
        background-color: $bg-surface-00dp;
    } @else if $dp == 1 {
        background-color: $bg-surface-01dp;
    } @else if $dp == 2 {
        background-color: $bg-surface-02dp;
    } @else if $dp == 3 {
        background-color: $bg-surface-03dp;
    } @else if $dp == 4 {
        background-color: $bg-surface-04dp;
    } @else if $dp == 6 {
        background-color: $bg-surface-06dp;
    } @else if $dp == 8 {
        background-color: $bg-surface-08dp;
    } @else if $dp == 12 {
        background-color: $bg-surface-12dp;
    } @else if $dp == 16 {
        background-color: $bg-surface-16dp;
    } @else if $dp == 24 {
        background-color: $bg-surface-24dp;
    } @else {
        @error "Invalid argument for $dp: {" + $dp + "}, look at the method definition for possible values";
    }
}

@mixin elevation($dp) {
    @if $dp == 0 {
        box-shadow: none !important;
    } @else if $dp == 1 {
        box-shadow: 0 1px 1px 0 $shadow-1, 0 2px 1px -1px $shadow-2, 0 1px 3px 0 $shadow-3 !important;
    } @else if $dp == 2 {
        box-shadow: 0 2px 2px 0 $shadow-1, 0 3px 1px -2px $shadow-2, 0 1px 5px 0 $shadow-3 !important;
    } @else if $dp == 3 {
        box-shadow: 0 3px 4px 0 $shadow-1, 0 3px 3px -2px $shadow-2, 0 1px 8px 0 $shadow-3 !important;
    } @else if $dp == 4 {
        box-shadow: 0 4px 5px 0 $shadow-1, 0 1px 10px 0 $shadow-2, 0 2px 4px -1px $shadow-3 !important;
    } @else if $dp == 6 {
        box-shadow: 0 6px 10px 0 $shadow-1, 0 1px 18px 0 $shadow-2, 0 3px 5px -1px $shadow-3 !important;
    } @else if $dp == 8 {
        box-shadow: 0 8px 10px 1px $shadow-1, 0 3px 14px 2px $shadow-2, 0 5px 5px -3px $shadow-3 !important;
    } @else if $dp == 9 {
        box-shadow: 0 9px 12px 1px $shadow-1, 0 3px 16px 2px $shadow-2, 0 5px 6px -3px $shadow-3 !important;
    } @else if $dp == 12 {
        box-shadow: 0 12px 17px 2px $shadow-1, 0 5px 22px 4px $shadow-2, 0 7px 8px -4px $shadow-3 !important;
    } @else if $dp == 16 {
        box-shadow: 0 16px 24px 2px $shadow-1, 0 6px 30px 5px $shadow-2, 0 8px 10px -5px $shadow-3 !important;
    } @else if $dp == 24 {
        box-shadow: 0 24px 38px 3px $shadow-1, 0 9px 46px 8px $shadow-2, 0 11px 15px -7px $shadow-3 !important;
    } @else {
        @error "Invalid argument for $dp: {" + $dp + "}, look at the method definition for possible values";
    }
}

// Buttons

@mixin ripple($color) {
    @if ($color) {
        perspective: 1px;
        position: relative;

        &:before {
            content: "";
            display: block;
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            border-radius: inherit;
            pointer-events: none;
            background-image: radial-gradient(circle, $color 1%, transparent 1%);
            background-repeat: no-repeat;
            background-position: 50%;
            background-size: 15000%;
            opacity: 0;
            transition: background 0.7s, opacity 1s;
            z-index: -1;
        }

        &:active:before,
        &:focus:before {
            animation-name: ripple;
            animation-duration: 0.6s;
            opacity: 0.4;
            transition: 0s !important;
        }

        @keyframes ripple {
            from {
                background-size: 1%;
            }
            to {
                background-size: 15000%;
            }
        }
    } @else {
        @warn "Must pass color for ripple effect.";
    }
}

@mixin button-base($bg, $fg, $do_ripple: true) {
    &:not(.hidden) {
        &,
        &:active,
        &:focus,
        &:active:focus {
            outline: unset;
            background-color: $bg;
            color: $fg;
        }

        // Leading icon
        & i,
        &.fa {
            margin-right: 8px;
        }

        // Clear default style
        border: none;
        outline: none;

        // Add new button style
        border-radius: 4px;
        @include typography(button);
        align-items: center;
        display: inline-flex;
        justify-content: center;
        line-height: normal;
        min-width: 64px;
        padding: 0px 16px;
        min-height: 36px;
        user-select: none;
        vertical-align: middle;

        @if ($do_ripple) {
            @include ripple(white);
        }
    }
}

@mixin text-button($fg, $fg-hover) {
    @include button-base(inherit, $fg);
    &:hover {
        color: $fg-hover;
    }
    &:focus,
    &:active,
    &:focus:active,
    &:focus:hover {
        outline: none;
        box-shadow: none;
    }
}

@mixin icon-button-base() {
    // Ripple
    @include ripple(white);

    // Remove default style
    border: 0;
    &:focus,
    &:active,
    &:hover,
    &:focus:active {
        outline: none;
        border: none;
    }

    // Shape
    border-radius: 50%;
    width: $icon-button-diameter;
    height: $icon-button-diameter;

    // Position
    @include flex-center();
}

@mixin flat-icon-button($bg-hover: $bg-field-hover) {
    @include icon-button-base();

    &:hover {
        background-color: $bg-hover;
        text-decoration: none;
    }

    &:focus,
    &:focus-visible {
        box-shadow: none;
        background-color: inherit;
        text-decoration: none;
    }
}

@mixin floating-action-button($bg, $bg-hover, $fg) {
    @include icon-button-base();

    // Color
    background-color: $bg;
    color: $fg;

    // Position
    @include elevation(8);
    transition: box-shadow 0.7s;

    // Interaction
    &:hover {
        @include elevation(6);
        transition: box-shadow 0.6s;
        background-color: $bg-hover;
    }

    &:focus,
    &:active {
        @include elevation(12);
        transition: box-shadow 0.6s;
    }
}

@mixin raised-button($bg, $bg-hover, $fg) {
    &:not(.hidden) {
        @include button-base($bg, $fg);

        @include elevation(3);
        transition: box-shadow 0.7s;

        &:hover {
            @include elevation(6);
            transition: box-shadow 0.6s;
            background-color: $bg-hover;
        }

        &:focus,
        &:active {
            @include elevation(12);
            transition: box-shadow 0.6s;
        }
    }
}

@mixin outlined-button($color, $do_ripple: true) {
    &:not(.hidden) {
        @include button-base(inherit, $color, $do_ripple);
        box-shadow: none;
        border: 1px solid $color !important;
    }
}

// Text field

@mixin text-field-base($color) {
    height: 56px;
    display: inline-flex;
    position: relative;

    width: max-content;
    min-width: 20%;
    margin-right: auto;

    input {
        align-self: flex-end;
        box-sizing: border-box;
        width: 100%;
        flex-grow: 1;
        height: 100%;
        border-radius: 0;
    }
}

@mixin filled-text-field($color) {
    background-color: $bg-field;
    color: $fg-on-surface;
    box-sizing: border-box;
    overflow: hidden;
    border-radius: 4px 4px 0 0;
    font-size: 1rem;
    font-weight: 400;
    letter-spacing: 0.009375em;
    text-decoration: inherit;
    text-transform: inherit;
    padding: 16px 6px;
    height: 42px;
    border: none;
    border-bottom: 1px solid;
    caret-color: $color;
    border-bottom-color: rgba(255, 255, 255, 0.42);
    will-change: border-color, background-color, border-width;
    transition: border-color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-width 0.2s ease-in-out !important;

    &:hover {
        background-color: $bg-field-hover;
        border-bottom-color: rgba(255, 255, 255, 0.87);
    }

    &:focus,
    &:focus-visible {
        color: inherit;
        background-color: $bg-field-focus;
        outline: none;
        box-shadow: none;
        border-bottom-color: $color;
        border-width: 2px;
        transition: none;
    }

    &:disabled,
    &:read-only {
        background-color: $bg-field-disabled;
        color: $fg-field-disabled;
        border-bottom-color: $fg-field-disabled;
        transition: none !important;

        &:hover {
            border-bottom-color: inherit;
        }
    }
}

// Positioning

@mixin flex-center() {
    display: flex !important;
    justify-content: center;
    align-items: center;
}

// Typography

@mixin font-weight($weight) {
    @if ($weight == "light") {
        font-weight: lighter;
    } @else if ($weight == "normal" or $weight == "regular") {
        font-weight: normal;
    } @else if ($weight == "medium") {
        font-weight: 500;
    } @else {
        @error "Invalid font weight: \"#{$weight}\"";
    }
}

@mixin typography($style) {
    font-family: "Roboto", "Helvetica", sans-serif;

    // Define typography styles as defined at https://material.io/design/typography/the-type-system.html#type-scale
    @if ($style == "body1") {
        font-size: 16px;
        letter-spacing: 0.5px;
        @include font-weight(normal);
    } @else if ($style == "body2") {
        font-size: 14px;
        letter-spacing: 0.25px;
        @include font-weight(normal);
    } @else if ($style == "button") {
        font-size: 14px;
        letter-spacing: 1.25px;
        text-transform: uppercase;
        @include font-weight(medium);
    } @else if ($style == "caption") {
        font-size: 12px;
        letter-spacing: 0.4px;
        @include font-weight(normal);
    } @else if ($style == "overline") {
        font-size: 10px;
        letter-spacing: 1.5px;
        @include font-weight(normal);
        text-transform: uppercase;
    } @else if ($style == "subtitle1") {
        font-size: 16px;
        letter-spacing: 0.15px;
        @include font-weight(normal);
    } @else if ($style == "subtitle2") {
        font-size: 14px;
        letter-spacing: 0.1px;
        @include font-weight(medium);
    } @else if ($style == "h1") {
        font-size: 96px;
        letter-spacing: -1.5px;
        @include font-weight(light);
    } @else if ($style == "h2") {
        font-size: 60px;
        letter-spacing: -0.5px;
        @include font-weight(light);
    } @else if ($style == "h3") {
        font-size: 48px;
        letter-spacing: 0px;
        @include font-weight(normal);
    } @else if ($style == "h4") {
        font-size: 34px;
        letter-spacing: 0.25px;
        @include font-weight(normal);
    } @else if ($style == "h5") {
        font-size: 24px;
        letter-spacing: 0.15px;
        @include font-weight(medium);
    } @else if ($style == "h6") {
        font-size: 20px;
        letter-spacing: 0.15px;
        @include font-weight(medium);
    } @else if ($style == "helper-text") {
        font-size: 12px;
        letter-spacing: 0.33px;
        @include font-weight(medium);
    } @else {
        @error "Typography style \"#{$style}\" is not supported";
    }
}

// Links

@mixin link() {
    color: var(--bg-secondary-light);
    @include font-weight(normal);

    &:hover,
    &:active,
    &:focus,
    &:focus:active {
        color: var(--bg-secondary-hover);
    }

    &:visited {
        color: var(--bg-secondary-light);
    }
}

// Icons

// Fluent icon
@mixin fluent-icon-base() {
    display: inline-block;
    margin: 0;
    padding: 0;
    width: $fluent-icon-size;
    height: $fluent-icon-size;

    &:before {
        width: $fluent-icon-size !important;
        height: $fluent-icon-size !important;
        display: flex !important;
        padding: 0 !important;
    }
}
@mixin fluent-icon($name, $color: $fluent-icon-default-color, $style: $fluent-icon-style) {
    &:before {
        @if color-is-hardcoded($color) {
            // Hardcoded color: use it in the url
            content: url("https://api.iconify.design/fluent/#{$name}-" + escape-size(
                    $fluent-icon-size
                ) + "-" + $style + ".svg?color=" + escape-color($color)) !important;
        } @else {
            @error "Can't hardcode a variable color in the URL.";
        }
    }
}
@mixin fluent-icon-override($name, $size, $color: $fluent-icon-default-color, $style: $fluent-icon-style) {
    width: $size;
    height: $size;

    &:before {
        width: $size !important;
        height: $size !important;

        @if color-is-hardcoded($color) {
            // Hardcoded color: use it in the url
            content: url("https://api.iconify.design/fluent/#{$name}-" + escape-size(
                    $size
                ) + "-" + $style + ".svg?color=" + escape-color($color)) !important;
        } @else {
            @error "Can't hardcode a variable color in the URL.";
        }
    }
}
@mixin fluent-icon-img($name, $color: $fluent-icon-default-color, $style: $fluent-icon-style) {
    @if color-is-hardcoded($color) {
        // Hardcoded color: use it in the url
        content: url("https://api.iconify.design/fluent/#{$name}-" + escape-size(
                $fluent-icon-size
            ) + "-" + $style + ".svg?color=" + escape-color($color)) !important;
    } @else {
        @error "Can't hardcode a variable color in the URL.";
    }
}

// Material icon
@mixin icon($name) {
    @include icon-base();
    @include icon-code($name);
}
@mixin icon-base() {
    font-family: "Material Icons";
    font-size: 16px;
    line-height: 16px;
    font-weight: normal;
    vertical-align: text-bottom;
    padding: 0;
    margin: 0;
    display: inline-block;
    visibility: visible;
    color: inherit;
}
// Icon codes
@mixin icon-code($name) {
    // Chevrons
    @if $name == "chevron-left" {
        content: "\e5cb" !important;
    } @else if $name == "chevron-right" {
        content: "\e5cc" !important;
    }
    // Back to top
    @else if $name == "arrow-upward" {
        content: "\e5d8" !important;
    }
    // Error
    @else if $name == "error" {
        content: "\e000" !important;
    } @else if $name == "error-outline" {
        content: "\e001" !important;
    }
    // Menu
    @else if $name == "menu" {
        content: "\e5d2" !important;
    }
    // Dashboard
    @else if $name == "dashboard" {
        content: "\e871" !important;
    }
    // Home
    @else if $name == "home" {
        content: "\e88a" !important;
    }
    // Calendar
    @else if $name == "calendar" {
        content: "\e878" !important;
    }
    // Open in new tab
    @else if $name == "open-in-new" {
        content: "\e89e" !important;
    }
    // Notifications
    @else if $name == "notifications" {
        content: "\e7f4" !important;
    }
    // Chat
    @else if $name == "chat" {
        content: "\e0b7" !important;
    }
    // Help
    @else if $name == "help" {
        content: "\e887" !important;
    }
    // Filter
    @else if $name == "filter-list" {
        content: "\e152" !important;
    }
    // Sort
    @else if $name == "sort" {
        content: "\e164" !important;
    }
    // View list
    @else if $name == "view-list" {
        content: "\e8ef" !important;
    }
    // More
    @else if $name == "more-vert" {
        content: "\e5d4" !important;
    } @else if $name == "more-horiz" {
        content: "\e5d3" !important;
    }
    // Schedule
    @else if $name == "access-time" {
        content: "\e192" !important;
    }

    // Unknown icon
    @else {
        @error "Unknown icon: \"#{$name}\"";
    }
}

// Utils

// Replaces the first occurrence of a substring with another string
@function str-replace($str, $search, $replacement) {
    // Find substring in original string
    $index: str-index($str, $search);

    // If substring is found
    @if $index != null {
        // Replace substring with replacement
        $str: str-slice($str, 0, $index - 1) + $replacement + str-slice($str, $index + str-length($search));
    }

    @return $str;
}

// Is the color hardcoded or not (not=CSS variable)
@function color-is-hardcoded($color) {
    $str-color: "#{$color}";
    @return str-index($str-color, "var(--") == null;
}

// Escape a color to be used in an URL
@function escape-color($color) {
    // Convert to string
    $str-color: "#{$color}";

    // If hex, replace # with %23
    $first-char: str-slice($str-color, 0, 1);
    @if ($first-char == "#") {
        $str-color: "%23" + str-slice($str-color, 2);
    }
    @return $str-color;
}

// Removes the unit of a size
@function escape-size($size) {
    $str-size: "#{$size}";

    // Replace unit with empty string
    $str-size: str-replace($str-size, "px", "");
    $str-size: str-replace($str-size, "em", "");
    $str-size: str-replace($str-size, "rem", "");

    // Return string
    @return $str-size;
}
